#!/usr/bin/env node

const config = require('../lib/config.js');
const fetch = require('node-fetch');
const path = require('path');
const program = require('commander');
const {version} = require('../package.json');
const defaultConfigPath = path.join(process.env.HOME, '.treehub.json');

program
  .version(version)
  .option('-c, --config [file]', 'Configuration File', defaultConfigPath)
  .option('-d, --description [description]', 'Package Description', '')
  .arguments('<dir>')
  .action((name) => {
    createPackage({name, description: program.description})
      .then(() => {
        console.log(`${name} created`);
      })
      .catch((error) => {
        console.error(error);
        process.exit(1);
      });
  });

program.parse(process.argv);

async function createPackage({name, description}) {
  const {token} = await config.load({configPath: program.config});
  if (!token) {
    throw new Error('Not logged in');
  }

  const res = await fetch('https://treehub.com/', {
    method: 'POST',
    headers: {
      'Authorization': `Token ${token}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query: `mutation x($input: PackageCreateInput!) {
        x: createPackage(input:$input) {
          package {id}
          errors {key message}
        }
      }`,
      variables: {
        input: {
          id: name,
          description,
        }
      }
    }),
  });
  if (res.status !== 200) {
    throw new Error(`Could not create package: ${res.status}`);
  }
  const body = await res.json();
  const response = body.data.x;
  if (response.errors.length > 0) {
    throw new Error(response.errors[0].message);
  }
  return response.package;
};
